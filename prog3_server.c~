/*Ben Thompson, Cat Feltz
 *Project 2: Sudoku
 *CS367 Fall 2015
 *10/26/15
 */

#include <sys/types.h> 
#include <sys/wait.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <signal.h>
#include <math.h>
#include <stdint.h>

#define QLEN 6 /* size of request queue */
#define DEBUG 1
#define MAX_ANSWER 1000 //max for 9x9 gameboard
#define BOARD_SIZE 9
#define MAX_VALID_MOVES BOARD_SIZE * BOARD_SIZE

enum{
	ROW,
	COLUMN,
	VALUE,
};

 void init_board(char board[][BOARD_SIZE]);
 void printboard(char board[][BOARD_SIZE]);
 int moveIsValid(char move[], char board[][BOARD_SIZE]);
 int blockIsValid(int row, int col, char val, char board[][BOARD_SIZE]);
/*------------------------------------------------------------------------
* Program: Network Sudoku
*
* Purpose: Server hosts connection with 2 clients and moderates game of competitive sudoku.

* Syntax: server [ port ]
*
* port - protocol port number to use
*
* Note: The port argument is optional. If no port is specified,

* the server uses the default given by PROTOPORT.
*
* Network Byte Order - htons(unsigned short hostshort) //host short to network short
*
*
*------------------------------------------------------------------------
*/
int main(int argc, char **argv) {
	struct protoent *ptrp; /* pointer to a protocol table entry */
	struct sockaddr_in sad1, sad2; /* structures to hold server's address */
	struct sockaddr_in cad; /* structure to hold client's address */
	int observ_sd, partic_sd, sd0, sd1, sd2; /* socket descriptors */
	                                          //observ_sd and partic_sd for initial setup
	int port; /* protocol port number */
	int observ_port; /*protocol port number where the server will listen for observers*/
	int partic_port; /*protocol port number where the server will listen for participants*/
	int alen; /* length of address */
	int optval = 1; /* boolean value when we set socket option */
	int max_observers; /* the maximum number of observers as specified by command line args */
	int max_participants; /* the maximum number of participants as specified by command line args */
	int N; /* length of each round in second as specified by command line args */
	int K; /* length of the pause between each round in seconds as specified by command line args */
	char player_number;
	char partic_number;
	char y_player_turn = 'Y';
	char n_player_turn = 'N';
	char prev_move = '0';
	char game_board[BOARD_SIZE][BOARD_SIZE];
	unsigned pass_count;
	unsigned valid_count;
	uint32_t player1_score = 0;
	uint32_t player2_score = 0;
	uint32_t temp_score;
	char game_running;
	char first_turn;
	char turn_flag = '1';
	char player_move[MAX_ANSWER];

	//=================Open Connection===================//

	//check args
	if( argc !=  7) {
		fprintf(stderr,"Error: Wrong number of arguments\n");
		fprintf(stderr,"usage:\n");
		fprintf(stderr,"./server server_port\n");
		exit(EXIT_FAILURE);
	}
	/* clear sockaddr structures */
	memset((char *)&sad1,0,sizeof(sad1));
	memset((char *)&sad2, 0, sizeof(sad2));
	/* set family to Internet */
	sad1.sin_family = AF_INET;
	sad2.sin_family = AF_INET;
	/* set the local IP address */
	sad1.sin_addr.s_addr = INADDR_ANY;
	sad2.sin_addr.s_addr = INADDR_ANY;
	/*convert 1st argument (port for observers) to binary*/
	observ_port = atoi(argv[2]);
	/*convert 2nd argument (port for participants) to binary*/
	partic_port = atoi(argv[3]);

	/* set the maximum number of observers at any one time during the game */
	max_observers = argv[4];

	/* set the maximum number of participants at any one time during the game */
	max_participants = argv[5];
	
	/* set round length */
	N = argv[6];
	if(N <= 0){
	  fprintf(stderr, "Error: Round length must be positive\n");
	  exit(EXIT_FAILURE);
	}

	/* set inter-round pause */
	K = argv[7];
	if(K <= 0){
	  fprintf(stderr, "Error: Inter-round pause length must be positive\n");
	  exit(EXIT_FAILURE);
	}

	/*test for illegal value for the observer port*/
	if(observ_port > 0){
	  sad1.sin_port = htons((u_short)observ_port);
	}else{
	  fprintf(stderr, "Error: Bad observer port number %s\n", argv[1]);
	  exit(EXIT_FAILURE);
	}

	/*test for illegal value for the participant port*/
	if(partic_port > 0){
	  sad2.sin_port = htons((u_short)partic_port);
	}else{
	  fprintf(stderr, "Error: Bad participant port number %s\n", argv[2]);
	  exit(EXIT_FAILURE);
	}	

	//port = atoi(argv[1]); /* convert argument to binary */
	

	/*if (port > 0) { /* test for illegal value */
	//	sad.sin_port = htons((u_short)port);
	//} else { /* print error message and exit */
	//	fprintf(stderr,"Error: Bad port number %s\n",argv[1]);
	//	exit(EXIT_FAILURE);
	//}
         

	/* Map TCP transport protocol name to protocol number */
	if ( ((long int)(ptrp = getprotobyname("tcp"))) == 0) {
		fprintf(stderr, "Error: Cannot map \"tcp\" to protocol number");
		exit(EXIT_FAILURE);
	}
	
	/* /\* Create a socket *\/ */
	/*
	 sd0 = socket(PF_INET, SOCK_STREAM, ptrp->p_proto); 
	 if (sd0 < 0) { 
	 	fprintf(stderr, "Error: Socket creation failed\n"); 
	 	exit(EXIT_FAILURE); 
	 } 
	*/

	/* Create a socket for the observers */
	observ_sd = socket(PF_INET, SOCK_STREAM, ptrp->p_proto);
	if(observ_sd < 0){
	        fprintf(srderr, "Error: Oberserver socket creation failed\n");
	        exit(EXIT_FAILURE);
	}

	
	/* Create a socket for the participants */
	partic_sd = socket(PF_INET, SOCK_STREAM, ptrp->p_proto);
	if(partic_sd < 0){
  	        fprintf(stderr, "Error: Participant socket creation failed\n");
	        exit(EXIT_FAILURE);
	}
	

	/* Allow reuse of port - avoid "Bind failed" issues */
	/*
	  if( setsockopt(sd0, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval)) < 0 ) {
		fprintf(stderr, "Error Setting socket option failed\n");
		exit(EXIT_FAILURE);
	}
	*/

	/* Allow reuse of ports - avoid "Bind failed" issues */
	if(setsockopt(observ_sd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval)) < 0){
	 	fprintf(stderr, "Error Setting observer socket option failed\n");
		exit(EXIT_FAILURE);
	}
	if(setsockopt(partic_sd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval)) < 0){
	 	fprintf(stderr, "Error Setting participant socket option failed\n");
		exit(EXIT_FAILURE);
	}

	/* Bind a local address to the socket */
	/*
	  if (bind(sd0, (struct sockaddr *)&sad, sizeof(sad)) < 0) {
		fprintf(stderr,"Error: Bind failed\n");
		exit(EXIT_FAILURE);
	}
	*/

	/* Bind local addresses to the sockets */
	if (bind(observ_sd, (struct sockaddr *)&sad1, sizeof(sad1)) < 0) {
		fprintf(stderr,"Error: Bind failed\n");
		exit(EXIT_FAILURE);
	}
	if (bind(partic_sd, (struct sockaddr *)&sad2, sizeof(sad2)) < 0) {
		fprintf(stderr,"Error: Bind failed\n");
		exit(EXIT_FAILURE);
	}

	/* Specify size of request queue */
	/*
	 if (listen(sd0, QLEN) < 0) {
		fprintf(stderr,"Error: Listen failed\n");
		exit(EXIT_FAILURE);
	}
	*/

	/* Specify size of request queues */
	if (listen(observ_sd, QLEN) < 0) {
		fprintf(stderr,"Error: Listen for observer failed\n");
		exit(EXIT_FAILURE);
	}
	if (listen(partic_sd, QLEN) < 0) {
		fprintf(stderr,"Error: Listen for participant failed\n");
		exit(EXIT_FAILURE);
	}
	
	printf("Server running. Listening for clients...\n");

	//================/!Open Connection!/=================//

	/* Main server loop - accept and handle requests 
   	Needs to connect to TWO hosts to start game loop*/
	while (1) {
		alen = sizeof(cad); //client addr

		//connect player 1
		if ( (sd1=accept(sd0, (struct sockaddr *)&cad, &alen)) < 0) {
			fprintf(stderr, "Error: Accept failed\n");
			exit(EXIT_FAILURE);
		}else{
			printf("Connection to client 1 successful.\n");
			player_number = '1';
			send(sd1, &player_number, sizeof(player_number), 0);
		//connect player 2
		}
		if ( (sd2=accept(sd0, (struct sockaddr *)&cad, &alen)) < 0) {
			fprintf(stderr, "Error: Accept failed\n");
			exit(EXIT_FAILURE);
		}else{
			printf("Connection to client 2 successful.\n");
			player_number = '2';
			send(sd2, &player_number, sizeof(player_number), 0);
		}

		//clients connected, fork
		signal(SIGCHLD,SIG_IGN); //makes wait() fail
		signal(SIGPIPE, SIG_IGN);
		pid_t cpID = fork();
		if( cpID < 0 ) {
			fprintf(stderr,"fork failed\n");
			return 1;
		}else if( cpID == 0 ) {//child process

			//initial starting conditions
			pass_count = 0;
			init_board(game_board);

			#if DEBUG
				printboard(game_board);
			#endif

			//game loop.
			while(1){
				
//SERVER SEND
//=====================================================================================
				//send turn: If true, then it is player 1's turn, else player 2's turn
				if(turn_flag){
					send(sd1, &y_player_turn, sizeof(y_player_turn), 0);
					send(sd2, &n_player_turn, sizeof(n_player_turn), 0);
				}else{
					send(sd2, &y_player_turn, sizeof(y_player_turn), 0);
					send(sd1, &n_player_turn, sizeof(n_player_turn), 0);
				}
				
				//send recent move: result to both players
				send(sd1, &prev_move, sizeof(prev_move), 0);
				send(sd2, &prev_move, sizeof(prev_move), 0);
				

				//send score: Netbyte order uint32_t
				temp_score = htonl(player1_score);
				#if DEBUG
					printf("Player1 score: %d\n", player1_score);
				#endif
				send(sd1, &temp_score, sizeof(temp_score), 0);
				send(sd2, &temp_score, sizeof(temp_score), 0);

				temp_score = htonl(player2_score);
				#if DEBUG
					printf("Player2 score: %d\n", player2_score);
				#endif
				send(sd1, &temp_score, sizeof(temp_score), 0);
				send(sd2, &temp_score, sizeof(temp_score), 0);

				//send board: 
				send(sd1, &game_board, sizeof(game_board), 0);
				send(sd2, &game_board, sizeof(game_board), 0);
				
//====================================================================================				

				//recv player move TODO: needs netbyte order
				if(turn_flag){
					if(recv(sd1, &player_move, sizeof(player_move), 0) <= 0){
						break;
					}
					#if DEBUG
						printf("received player 1's move.\n");
					#endif
				}else{
					if(recv(sd2, &player_move, sizeof(player_move), 0) <= 0){
						break;
					}
					#if DEBUG
						printf("received player 2's move.\n");
					#endif
				}
				//Player Passes
				if(player_move[0] == 'P'){
					#if DEBUG
						printf("Player passed\n");
					#endif
					pass_count++;
					prev_move = 'P';
				}else{
					//Not pass
					pass_count = 0;

					//MOVE VALID
					if(moveIsValid(player_move, game_board)){
						prev_move = '1';
						valid_count++;
						game_board[(player_move[ROW]-64)-1][(player_move[COLUMN]-48)-1] = player_move[VALUE];

						//update score. True:Curr player + 1, not curr -1.
						if(turn_flag){
							player1_score++;
						}else{
							player2_score++;
						}

					//MOVE NOT VALID
					}else{
						prev_move = 'X';
						//update score. curr player -1, not curr +1.
						if(turn_flag){
							if(player1_score > 0)
								player1_score--;
						}else{
							if(player2_score > 0)
								player2_score--;
						}
					}
				}

				//win conditions
				if(pass_count > 2 || valid_count == MAX_VALID_MOVES){
					y_player_turn = 'Z';
					n_player_turn = 'Z';

					#if DEBUG
						printf("Game over. ");
					#endif
					break;
				}
				
				#if DEBUG
					printboard(game_board);
				#endif

				//change turns
				turn_flag = !turn_flag;

			}//end game loop

			y_player_turn = 'Z';
			n_player_turn = 'Z';
			send(sd1, &y_player_turn, sizeof(y_player_turn), 0);
			send(sd2, &n_player_turn, sizeof(n_player_turn), 0);
			
			close(sd1);
			close(sd2);

			#if DEBUG
				printf("PID [%d] sockets closed.\n", getpid());
			#endif
			exit(1);//doesn't check exit status due to SIG_IGN. 

		} else {//parent
			#if DEBUG
			fprintf(stderr,"Client connected: PID = %u\n",cpID);
			#endif
		}	
	}
}

/*Input: size of board, board pointer
 *Ouput: none
 *Initialize all board elements to '0'
 */
void init_board(char board[][BOARD_SIZE]){
	int i,j;
	for(i = 0; i < BOARD_SIZE; i++){
		for(j = 0; j < BOARD_SIZE; j++){
			board[i][j] = '0';
		}
	}
}

//prints board on server-side for debugging
void printboard(char board[][BOARD_SIZE]){
	int i,j;

	for(i = 0; i < BOARD_SIZE; i++){
		printf("\n");
		for(j = 0; j < BOARD_SIZE; j++){
			printf("%c", board[i][j]);
		}
	}
	printf("\n");
	printf("PID: [%d]\n", getpid());
}
/*Input: player's char move[], game_board[][].
 *Output: 1 if valid, 0 if invalid
 *
 *Checks to see if the player move is valid per sudoku rules.
 *	-Valid in grid: column 1-9 | row A-I.
 *	-Valid input: no duplicate values (1-9) on row, column or 3x3 block.
 *  -Otherwise move is invalid.
 */
int moveIsValid(char move[], char board[][BOARD_SIZE]){
	int row;
	int col;
	char val;
	int i,j;

	//parse player move;
	row = (move[ROW] - 64)-1; //ascii conversion
	col = (move[COLUMN] - 48)-1;
	val = move[VALUE];

	#if DEBUG
		printf("CHAR MOVE: row:%c, col:%c, val:%c\n", move[0], move[1], move[2]);
		printf("\nplayer move: Row: %d, Col: %d, Value: %c\n", row, col, val);
		printf("Element at %d, %d = '%c'\n", row, col, board[row][col]);
	#endif

	//check if element is available
	if(board[row][col] == '0'){

		//check row
		for(i = 0; i < BOARD_SIZE; i++){
			if(board[row][i] == val){
				return 0;
			}
		}
		//check col
		for(i = 0; i < BOARD_SIZE; i++){
			if(board[i][col] == val){
				return 0;
			}
		}
		//check block
		if(!blockIsValid(row, col, val, board)){
			return 0;
		}
		return 1;
	}else{
		//invalid move
		printf("invalid move");
		return 0;
	}
}

/*Input: input row, col val and gameboard.
 *Output: 1 for valid 0 for invalid.
 *Checks the sudoku block the users input is within. returns true if there
 *are no duplicate values, else false.
 */
int blockIsValid(int row, int col, char val, char board[][BOARD_SIZE]){
	int block_row = (row-1) % 3;
	int block_col = (col-1) % 3;
	int i,j;

	#if DEBUG
		printf("block: row:%d, col: %d\n", block_row+1, block_col+1);
	#endif

	if(block_row == 0 && block_col == 0){
		for(i = 0; i<3; i++){
			for(j = 0; j<3; j++){
				if(board[i][j] == val)
					return 0;
			}
		}
	}else if(block_row == 0 && block_col == 1){
		for(i = 0; i<3; i++){
			for(j = 3; j<6; j++){
				if(board[i][j] == val)
					return 0;
			}
		}
	}else if(block_row == 0 && block_col == 2){
		for(i = 1; i<3; i++){
			for(j = 6; j<9; j++){
				if(board[i][j] == val)
					return 0;
			}
		}
	}else if(block_row == 1 && block_col == 0){
		for(i = 3; i<6; i++){
			for(j = 0; j<3; j++){
				if(board[i][j] == val)
					return 0;
			}
		}
	}else if(block_row == 1 && block_col == 1){
		for(i = 3; i<6; i++){
			for(j = 3; j<6; j++){
				if(board[i][j] == val)
					return 0;
			}
		}
	}else if(block_row == 1 && block_col == 2){
		for(i = 3; i<6; i++){
			for(j = 6; j<9; j++){
				if(board[i][j] == val)
					return 0;
			}
		}
	}else if(block_row == 2 && block_col == 0){
		for(i = 6; i<9; i++){
			for(j = 0; j<3; j++){
				if(board[i][j] == val)
					return 0;
			}
		}
	}else if(block_row == 2 && block_col == 1){
		for(i = 6; i<9; i++){
			for(j = 3; j<6; j++){
				if(board[i][j] == val)
					return 0;
			}
		}
	}else{
		for(i = 6; i<9; i++){
			for(j = 6; j<9; j++){
				if(board[i][j] == val)
					return 0;
			}
		}
	}
	return 1;
}
